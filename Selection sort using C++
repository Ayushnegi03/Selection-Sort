//Selection sorting
//Selection sort is a simple sorting algorithm.
//This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, 
//the sorted part at the left end and the unsorted part at the right end.
#include <iostream>
using namespace std;
void selection(int Arr[], int n)  
{  
    int i, j, small; 
    for (i = 0; i < n-1; i++)    // One by one move boundary of unsorted subarray  
    {  
        small = i; //minimum element in unsorted array 
        for (j = i+1; j < n; j++)  
 if (Arr[j] < Arr[small])  
            small = j;  
// Swap the minimum element with the first element  
    int tmp = Arr[small];  
    Arr[small] = Arr[i];  
    Arr[i] = tmp;  
    }  
} 
void printArr(int A[], int n) /* function to print the array */  
{  
    int i;  
    for (i = 0; i < n; i++)  
        cout<<A[i]<<"\t";  
}
int main()  
{  
    int A[] = { 7, -4, -1, 12, 31, 25, 7 };  
    int n = sizeof(A) / sizeof(A[0]);  
    cout<<"Before sorting array elements:"<<endl;  
    printArr(A, n);  
    selection(A, n);  
    cout<<"\nAfter sorting array elements:"<<endl;    
    printArr(A, n);                                                                                        
    return 0;  
}     
//Output-
//Before sorting array elements:
//7    -4  -1   12   31   25   7
//After sorting array elements:
//-4   -1   7   7   12   25   31  
